
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String    @id @default(uuid())
  firstName              String
  lastName               String
  phoneNumber            String    @unique
  email                  String?   @unique
  roleId                 String
  passwordChangeRequired Boolean   @default(true)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  role                   Role      @relation(fields: [roleId], references: [id])
  events                 Event[]
  attendees              Attendee[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String
  hint        String?
  category    String
  image       String?
  organizerId String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  organizer   User         @relation(fields: [organizerId], references: [id])
  ticketTypes TicketType[]
  attendees   Attendee[]
  promoCodes  PromoCode[]
  pendingOrders PendingOrder[]
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal    @db.Decimal(10, 2)
  total     Int
  sold      Int        @default(0)
  eventId   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]
  pendingOrders PendingOrder[]
}

model Attendee {
  id           Int         @id @default(autoincrement())
  name         String
  email        String?
  checkedIn    Boolean     @default(false)
  eventId      Int
  ticketTypeId Int
  userId       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  event        Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType   TicketType  @relation(fields: [ticketTypeId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])
  PendingOrder PendingOrder[]
}

model PromoCode {
  id        Int          @id @default(autoincrement())
  code      String       @unique
  type      PromoCodeType
  value     Decimal      @db.Decimal(10, 2)
  maxUses   Int
  uses      Int          @default(0)
  eventId   Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  event     Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model PendingOrder {
  id                Int         @id @default(autoincrement())
  transactionId     String      @unique @default(uuid())
  arifpaySessionId  String?     @unique
  eventId           Int
  ticketTypeId      Int
  attendeeData      Json
  promoCode         String?
  status            String      @default("PENDING") // PENDING, COMPLETED, FAILED
  attendeeId        Int?        @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  event             Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType        TicketType  @relation(fields: [ticketTypeId], references: [id])
  attendee          Attendee?   @relation(fields: [attendeeId], references: [id])
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}
