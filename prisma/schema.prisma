// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(uuid())
  firstName               String
  lastName                String
  phoneNumber             String     @unique
  email                   String?    @unique
  passwordChangeRequired  Boolean    @default(false)
  role                    Role       @relation(fields: [roleId], references: [id])
  roleId                  String
  events                  Event[]    @relation("OrganizerEvents")
  attendees               Attendee[]
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String
  hint        String?
  category    String
  image       String?
  organizer   User         @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId String
  ticketTypes TicketType[]
  attendees   Attendee[]
  promoCodes  PromoCode[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal    @db.Decimal(10, 2)
  total     Int
  sold      Int        @default(0)
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   Int
  attendees Attendee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Attendee {
  id           Int        @id @default(autoincrement())
  name         String
  email        String?
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
  event        Event      @relation(fields: [eventId], references: [id])
  eventId      Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId Int
  checkedIn    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}

model PromoCode {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  type      PromoCodeType
  value     Decimal       @db.Decimal(10, 2)
  maxUses   Int
  uses      Int           @default(0)
  event     Event         @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
