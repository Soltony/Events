
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  phoneNumber String    @unique
  roleId      String
  role        Role      @relation(fields: [roleId], references: [id])
  attendees   Attendee[]
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  permissions String? // Comma-separated list of permissions
  users       User[]
}

model Event {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime?
  location     String
  category     String
  image        String?
  hint         String?
  ticketTypes  TicketType[]
  promoCodes   PromoCode[]
  attendees    Attendee[]
}

model TicketType {
  id      Int      @id @default(autoincrement())
  name    String
  price   Decimal
  total   Int
  sold    Int      @default(0)
  eventId Int
  event   Event    @relation(fields: [eventId], references: [id])
  attendees Attendee[]
}

model Attendee {
  id            Int        @id @default(autoincrement())
  name          String
  email         String
  checkedIn     Boolean    @default(false)
  eventId       Int
  ticketTypeId  Int
  userId        String?
  event         Event      @relation(fields: [eventId], references: [id])
  ticketType    TicketType @relation(fields: [ticketTypeId], references: [id])
  user          User?      @relation(fields: [userId], references: [id])
}

model PromoCode {
  id      Int     @id @default(autoincrement())
  code    String  @unique
  type    String  // PERCENTAGE or FIXED
  value   Decimal
  uses    Int     @default(0)
  maxUses Int
  eventId Int
  event   Event   @relation(fields: [eventId], references: [id])
}
