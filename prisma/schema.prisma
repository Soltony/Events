// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String    @id @default(cuid())
  firstName              String
  lastName               String
  email                  String?   @unique
  phoneNumber            String    @unique
  passwordChangeRequired Boolean   @default(false)
  roleId                 String
  role                   Role      @relation(fields: [roleId], references: [id])
  events                 Event[]
  attendees              Attendee[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime?
  location     String
  cbsAccount   String?
  hint         String?
  category     String
  image        String?
  organizerId  String
  organizer    User         @relation(fields: [organizerId], references: [id])
  ticketTypes  TicketType[]
  attendees    Attendee[]
  promoCodes   PromoCode[]
  pendingOrders PendingOrder[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal
  total     Int
  sold      Int        @default(0)
  eventId   Int
  event     Event      @relation(fields: [eventId], references: [id])
  attendees Attendee[]
  pendingOrders PendingOrder[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Attendee {
  id           Int        @id @default(autoincrement())
  name         String
  phoneNumber  String?
  eventId      Int
  ticketTypeId Int
  userId       String?
  checkedIn    Boolean    @default(false)
  event        Event      @relation(fields: [eventId], references: [id])
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])
  pendingOrders PendingOrder[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model PromoCode {
  id        Int           @id @default(autoincrement())
  code      String
  type      PromoCodeType
  value     Decimal
  maxUses   Int
  uses      Int           @default(0)
  eventId   Int
  event     Event         @relation(fields: [eventId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([code, eventId])
}

model PendingOrder {
  id               Int        @id @default(autoincrement())
  transactionId    String     @unique @default(cuid())
  arifpaySessionId String?
  eventId          Int
  ticketTypeId     Int?
  attendeeId       Int?       @unique
  attendeeData     Json
  promoCode        String?
  status           String     @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  event            Event      @relation(fields: [eventId], references: [id])
  ticketType       TicketType? @relation(fields: [ticketTypeId], references: [id])
  attendee         Attendee?  @relation(fields: [attendeeId], references: [id])
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}
