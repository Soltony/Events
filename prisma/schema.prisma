
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       String     @id @default(cuid())
  firstName                String
  lastName                 String
  email                    String?    @unique
  phoneNumber              String     @unique
  nibBankAccount           String?
  roleId                   String
  role                     Role       @relation(fields: [roleId], references: [id])
  events                   Event[]
  attendees                Attendee[]
  passwordChangeRequired   Boolean    @default(false)
  status                   UserStatus @default(ACTIVE)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id              Int          @id @default(autoincrement())
  name            String
  description     String       @db.Text
  startDate       DateTime
  endDate         DateTime?
  location        String
  category        String
  status          EventStatus  @default(PENDING)
  image           String?
  hint            String?
  organizerId     String
  organizer       User         @relation(fields: [organizerId], references: [id])
  ticketTypes     TicketType[]
  attendees       Attendee[]
  promoCodes      PromoCode[]
  nibBankAccount  String
  rejectionReason String?
  pendingOrders   PendingOrder[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal    @db.Decimal(10, 2)
  total     Int
  sold      Int        @default(0)
  eventId   Int
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  pendingOrders PendingOrder[]
}

model Attendee {
  id           Int      @id @default(autoincrement())
  name         String
  phoneNumber  String?
  checkedIn    Boolean  @default(false)
  eventId      Int
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketTypeId Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Restrict)
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  pendingOrder PendingOrder?
}

model PromoCode {
  id        Int         @id @default(autoincrement())
  code      String      @unique
  type      PromoCodeType
  value     Decimal     @db.Decimal(10, 2)
  maxUses   Int
  uses      Int         @default(0)
  eventId   Int
  event     Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model PendingOrder {
  id              Int @id @default(autoincrement())
  transactionId   String? @unique
  arifpaySessionId String? @unique
  eventId         Int
  event           Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketTypeId    Int?
  ticketType      TicketType? @relation(fields: [ticketTypeId], references: [id], onDelete: SetNull)
  attendeeData    Json
  promoCode       String?
  status          OrderStatus @default(PENDING)
  attendeeId      Int? @unique
  attendee        Attendee? @relation(fields: [attendeeId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


enum PromoCodeType {
  PERCENTAGE
  FIXED
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}
