// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String   @id @default(cuid())
  firstName               String
  lastName                String
  phoneNumber             String   @unique
  email                   String?  @unique
  passwordChangeRequired  Boolean  @default(false)
  cbsAccount              String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  roleId                  String
  role                    Role     @relation(fields: [roleId], references: [id])
  events                  Event[]
  attendees               Attendee[]

  @@index([roleId])
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  permissions String?
  users       User[]
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String
  cbsAccount  String?
  hint        String?
  category    String
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  organizerId String
  organizer   User         @relation(fields: [organizerId], references: [id])
  ticketTypes TicketType[]
  attendees   Attendee[]
  promoCodes  PromoCode[]
  pendingOrders PendingOrder[]

  @@index([organizerId])
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal    @db.Decimal(10, 2)
  total     Int
  sold      Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  eventId   Int
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]

  @@index([eventId])
}

model Attendee {
  id           Int        @id @default(autoincrement())
  name         String
  phoneNumber  String?
  checkedIn    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  eventId      Int
  ticketTypeId Int
  userId       String?
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  user         User?      @relation(fields: [userId], references: [id])
  pendingOrders PendingOrder[]

  @@index([eventId])
  @@index([ticketTypeId])
  @@index([userId])
}

model PromoCode {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  type      PromoCodeType
  value     Decimal       @db.Decimal(10, 2)
  uses      Int           @default(0)
  maxUses   Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  eventId   Int
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model PendingOrder {
  id               String    @id @default(cuid())
  status           String    @default("PENDING") // PENDING, COMPLETED, FAILED
  arifpaySessionId String?   @unique
  transactionId    String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Storing the details needed to fulfill the order upon webhook confirmation
  eventId          Int
  ticketTypeId     Int?
  promoCode        String?
  attendeeData     Json
  
  // Link to the created attendee after successful payment
  attendeeId       Int?      @unique
  attendee         Attendee? @relation(fields: [attendeeId], references: [id])

  event            Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}


enum PromoCodeType {
  PERCENTAGE
  FIXED
}
