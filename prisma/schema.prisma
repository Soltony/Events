
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(uuid())
  firstName               String
  lastName                String
  email                   String?   @unique
  phoneNumber             String    @unique
  passwordChangeRequired  Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  roleId                  String
  role                    Role      @relation(fields: [roleId], references: [id])
  events                  Event[]
  attendees               Attendee[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Event {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime?
  location        String
  category        String
  image           String?
  hint            String?
  organizerId     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          EventStatus   @default(PENDING)
  rejectionReason String?
  nibBankAccount  String
  organizer       User          @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  ticketTypes     TicketType[]
  attendees       Attendee[]
  promoCodes      PromoCode[]
  pendingOrders   PendingOrder[]
}

model TicketType {
  id        Int      @id @default(autoincrement())
  name      String
  price     Decimal  @db.Decimal(10, 2)
  total     Int
  sold      Int      @default(0)
  eventId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]
}

model Attendee {
  id           Int        @id @default(autoincrement())
  name         String
  phoneNumber  String?
  eventId      Int
  ticketTypeId Int
  userId       String?
  checkedIn    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  event        Event      @relation(fields: [eventId], references: [id], onDelete: NoAction)
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: NoAction)
  user         User?      @relation(fields: [userId], references: [id])
  pendingOrder PendingOrder[]
}

model PromoCode {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  type      PromoCodeType
  value     Decimal       @db.Decimal(10, 2)
  maxUses   Int
  uses      Int           @default(0)
  eventId   Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model PendingOrder {
  id               Int      @id @default(autoincrement())
  transactionId    String?  @unique
  arifpaySessionId String?  @unique
  eventId          Int
  ticketTypeId     Int?
  attendeeData     Json
  promoCode        String?
  status           String   @default("PENDING") // PENDING, COMPLETED, FAILED
  attendeeId       Int?     @unique
  attendee         Attendee? @relation(fields: [attendeeId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}
