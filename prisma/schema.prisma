// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String     @id @default(uuid())
  firstName              String
  lastName               String
  phoneNumber            String     @unique
  email                  String?    @unique
  roleId                 String
  role                   Role       @relation(fields: [roleId], references: [id])
  events                 Event[]
  attendees              Attendee[]
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  passwordChangeRequired Boolean    @default(true)
  status                 UserStatus @default(ACTIVE)

  @@index([roleId])
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  permissions String? // Comma-separated list of permissions
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  startDate      DateTime
  endDate        DateTime?
  location       String
  hint           String?
  category       String
  image          String?
  status         EventStatus  @default(PENDING)
  rejectionReason String?
  organizerId    String
  organizer      User         @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  nibBankAccount String
  ticketTypes    TicketType[]
  promoCodes     PromoCode[]
  attendees      Attendee[]
  pendingOrders  PendingOrder[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizerId])
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal    @db.Decimal(10, 2)
  total     Int
  sold      Int        @default(0)
  eventId   Int
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([eventId])
}

model PromoCode {
  id        Int         @id @default(autoincrement())
  code      String
  type      PromoCodeType
  value     Decimal     @db.Decimal(10, 2)
  maxUses   Int
  uses      Int         @default(0)
  eventId   Int
  event     Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([code, eventId])
  @@index([eventId])
}

model Attendee {
  id           Int        @id @default(autoincrement())
  name         String
  phoneNumber  String?
  userId       String?
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventId      Int
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketTypeId Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  checkedIn    Boolean    @default(false)
  pendingOrder PendingOrder[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([userId])
  @@index([eventId])
  @@index([ticketTypeId])
}

model PendingOrder {
  id              String      @id @default(uuid())
  transactionId   String?     @unique
  arifpaySessionId String?     @unique
  eventId         Int
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendeeId      Int?        @unique
  attendee        Attendee?   @relation(fields: [attendeeId], references: [id], onDelete: SetNull)
  ticketTypeId    Int?
  attendeeData    Json
  promoCode       String?
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([eventId])
  @@index([transactionId])
}


enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}

enum UserStatus {
  ACTIVE
  INACTIVE
}
