// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(cuid())
  firstName   String
  lastName    String
  phoneNumber String @unique
  password    String // In a real app, this should be a hash

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[] @default([])
  users       User[]
}

enum PromoType {
  PERCENTAGE
  FIXED
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String
  category    String
  image       String[]
  hint        String?

  ticketTypes TicketType[]
  attendees   Attendee[]
  promoCodes  PromoCode[]
}

model TicketType {
  id      Int     @id @default(autoincrement())
  name    String
  price   Decimal
  total   Int
  sold    Int     @default(0)

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  attendees Attendee[]
}

model Attendee {
  id        Int     @id @default(autoincrement())
  name      String
  email     String
  checkedIn Boolean @default(false)

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId Int
}

model PromoCode {
  id      Int       @id @default(autoincrement())
  code    String    @unique
  type    PromoType
  value   Decimal
  uses    Int       @default(0)
  maxUses Int

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
}
