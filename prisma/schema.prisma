
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String   @id @default(cuid())
  firstName               String
  lastName                String
  phoneNumber             String   @unique
  email                   String?  @unique
  passwordChangeRequired  Boolean  @default(true)
  cbsAccount              String?
  roleId                  String
  role                    Role     @relation(fields: [roleId], references: [id])
  events                  Event[]
  attendees               Attendee[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  nibBankAccount          String?
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id              Int           @id @default(autoincrement())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime?
  location        String
  category        String
  image           String?
  hint            String?
  organizerId     String
  organizer       User          @relation(fields: [organizerId], references: [id])
  ticketTypes     TicketType[]
  attendees       Attendee[]
  promoCodes      PromoCode[]
  pendingOrders   PendingOrder[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  nibBankAccount  String
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal    @db.Decimal(10, 2)
  total     Int
  sold      Int        @default(0)
  eventId   Int
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Attendee {
  id           Int          @id @default(autoincrement())
  name         String
  phoneNumber  String?
  eventId      Int
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketTypeId Int
  ticketType   TicketType   @relation(fields: [ticketTypeId], references: [id])
  userId       String?
  user         User?        @relation(fields: [userId], references: [id])
  checkedIn    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  pendingOrder PendingOrder?
}

model PromoCode {
  id        Int           @id @default(autoincrement())
  code      String
  type      PromoCodeType
  value     Decimal       @db.Decimal(10, 2)
  maxUses   Int
  uses      Int           @default(0)
  eventId   Int
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([code, eventId])
}

model PendingOrder {
  id              String      @id @default(cuid())
  eventId         Int
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendeeId      Int?        @unique
  attendee        Attendee?   @relation(fields: [attendeeId], references: [id], onDelete: SetNull)
  ticketTypeId    Int?
  attendeeData    Json
  promoCode       String?
  status          String      @default("PENDING") // PENDING, COMPLETED, FAILED
  arifpaySessionId String?    @unique
  createdAt       DateTime    @default(now())
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}
