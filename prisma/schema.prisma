
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id
  firstName               String
  lastName                String
  email                   String?   @unique
  phoneNumber             String    @unique
  roleId                  String
  passwordChangeRequired  Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  role      Role     @relation(fields: [roleId], references: [id])
  events    Event[]  @relation("OrganizerEvents")
  attendees Attendee[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Event {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime?
  location     String
  category     String
  image        String?
  hint         String?
  organizerId  String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  organizer    User         @relation("OrganizerEvents", fields: [organizerId], references: [id])
  ticketTypes  TicketType[]
  attendees    Attendee[]
  promoCodes   PromoCode[]
}

model TicketType {
  id        Int        @id @default(autoincrement())
  name      String
  price     Decimal
  total     Int
  sold      Int        @default(0)
  eventId   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]
}

model Attendee {
  id           Int        @id @default(autoincrement())
  name         String
  email        String
  checkedIn    Boolean    @default(false)
  eventId      Int
  ticketTypeId Int
  userId       String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Restrict)
  user         User?      @relation(fields: [userId], references: [id])
}

model PromoCode {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  type      PromoCodeType
  value     Decimal
  uses      Int           @default(0)
  maxUses   Int
  eventId   Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([code, eventId])
}

enum PromoCodeType {
  PERCENTAGE
  FIXED
}

    