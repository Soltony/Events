// prisma/schema.prisma

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  phoneNumber String   @unique
  roleId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Event {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime?
  location    String
  category    String
  image       String[]
  hint        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ticketTypes TicketType[]
  attendees   Attendee[]
  promoCodes  PromoCode[]
}

model TicketType {
  id        Int       @id @default(autoincrement())
  name      String
  price     Decimal   @db.Decimal(10, 2)
  total     Int
  sold      Int       @default(0)
  eventId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendees Attendee[]
}

model Attendee {
  id           Int        @id @default(autoincrement())
  name         String
  email        String
  checkedIn    Boolean    @default(false)
  eventId      Int
  ticketTypeId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
}

model PromoCode {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  type      String    // PERCENTAGE or FIXED
  value     Decimal   @db.Decimal(10, 2)
  maxUses   Int
  uses      Int       @default(0)
  eventId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
